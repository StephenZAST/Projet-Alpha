// Import required enums from core schema
import { UserRole } from "./core"

model User {
  id                        String    @id @default(uuid()) @db.Uuid
  email                     String    @unique @db.VarChar(255)
  password                  String    @db.VarChar(255)
  first_name                String    @db.VarChar(100)
  last_name                 String    @db.VarChar(100)
  phone                     String?   @unique @db.VarChar(20)
  role                      UserRole  @default(CLIENT)
  referral_code            String?   @db.VarChar(20)
  created_at               DateTime  @default(now()) @db.Timestamptz
  updated_at               DateTime  @default(now()) @db.Timestamptz
  instance_id              String?   @db.Uuid
  aud                      String?   @db.VarChar(255)
  encrypted_password       String?   @db.VarChar(255)
  email_confirmed_at       DateTime? @db.Timestamptz
  invited_at               DateTime? @db.Timestamptz
  confirmation_token       String?   @db.VarChar(255)
  confirmation_sent_at     DateTime? @db.Timestamptz
  recovery_token          String?   @db.VarChar(255)
  recovery_sent_at        DateTime? @db.Timestamptz
  email_change_token_new  String?   @db.VarChar(255)
  email_change            String?   @db.VarChar(255)
  email_change_sent_at    DateTime? @db.Timestamptz
  last_sign_in_at         DateTime? @db.Timestamptz
  raw_app_meta_data       Json?     @db.JsonB
  raw_user_meta_data      Json?     @db.JsonB
  is_super_admin          Boolean?
  phone_confirmed_at      DateTime? @db.Timestamptz
  phone_change            String?   @default("") @db.Text
  phone_change_token      String?   @default("") @db.VarChar(255)
  phone_change_sent_at    DateTime? @db.Timestamptz
  confirmed_at            DateTime? @db.Timestamptz
  email_change_token_current String? @default("") @db.VarChar(255)
  email_change_confirm_status Int?    @default(0) @db.SmallInt
  banned_until            DateTime? @db.Timestamptz
  reauthentication_token  String?   @default("") @db.VarChar(255)
  reauthentication_sent_at DateTime? @db.Timestamptz
  is_sso_user            Boolean   @default(false)
  deleted_at             DateTime? @db.Timestamptz
  is_anonymous           Boolean   @default(false)

  // Relations
  orders                  Order[]
  notifications          Notification[]
  notificationPreferences NotificationPreferences?
  loyaltyPoints          LoyaltyPoints?
  addresses              Address[]
  archivedOrders         OrderArchive[]
  pointTransactions      PointTransaction[]
  resetCodes             ResetCode[]
  rewardClaims           RewardClaim[]
  userOffers             UserOffer[]
  affiliateProfile       AffiliateProfile?
  blogArticles          BlogArticle[]

  @@index([email])
  @@index([referral_code])
  @@index([instance_id])
  @@index([is_anonymous])
  @@index([instance_id, email])
  @@unique([email_change_token_current])
  @@unique([email_change_token_new])
  @@unique([reauthentication_token])
  @@unique([recovery_token])
  @@unique([confirmation_token])
  @@unique([email])
}

model Address {
  id            String    @id @default(uuid()) @db.Uuid
  user_id       String?   @db.Uuid
  name          String?   @db.VarChar(255)
  street        String    @db.VarChar(255)
  city          String    @db.VarChar(100)
  postal_code   String?   @db.VarChar(20)
  gps_latitude  Decimal?  @db.Decimal
  gps_longitude Decimal?  @db.Decimal
  is_default    Boolean?  @default(false)
  created_at    DateTime? @default(now()) @db.Timestamptz
  updated_at    DateTime? @default(now()) @db.Timestamptz

  // Relations
  user          User?     @relation(fields: [user_id], references: [id])
  orders        Order[]
  archivedOrders OrderArchive[]
}

model ResetCode {
  id         String    @id @default(uuid()) @db.Uuid
  user_id    String    @db.Uuid
  email      String
  code       String    @db.VarChar
  expires_at DateTime? @db.Timestamptz
  used       Boolean   @default(false)
  created_at DateTime  @default(now()) @db.Timestamptz
  updated_at DateTime  @default(now()) @db.Timestamptz

  // Relations
  user       User      @relation(fields: [user_id], references: [id])
}