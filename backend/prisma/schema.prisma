generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model addresses {
  id             String           @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId         String?          @db.Uuid
  street         String           @db.VarChar
  city           String           @db.VarChar
  postal_code    String?          @db.VarChar
  gps_latitude   Decimal?         @db.Decimal
  gps_longitude  Decimal?         @db.Decimal
  is_default     Boolean?         @default(false)
  created_at     DateTime?        @default(now()) @db.Timestamptz(6)
  updated_at     DateTime?        @default(now()) @db.Timestamptz(6)
  name           String?          @db.VarChar
  users          users?           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "addresses_userid_fkey")
  orders         orders[]
  orders_archive orders_archive[]
}

model affiliate_levels {
  id                 String               @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name               String               @db.VarChar
  minEarnings        Decimal              @db.Decimal
  commissionRate     Decimal              @db.Decimal
  created_at         DateTime?            @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  updated_at         DateTime?            @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  affiliate_profiles affiliate_profiles[]
}

model affiliate_profiles {
  id                       String                    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId                   String                    @unique(map: "affiliate_profiles_userid_key") @db.Uuid
  affiliate_code           String                    @unique @db.VarChar
  parent_affiliate_id      String?                   @db.Uuid
  commission_balance       Decimal?                  @default(0) @db.Decimal
  total_earned             Decimal?                  @default(0) @db.Decimal
  created_at               DateTime?                 @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  updated_at               DateTime?                 @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  commission_rate          Decimal?                  @default(10.00) @db.Decimal
  is_active                Boolean?                  @default(true)
  total_referrals          Int?                      @default(0)
  monthly_earnings         Decimal?                  @default(0.00) @db.Decimal
  level_id                 String?                   @db.Uuid
  status                   status?                   @default(PENDING)
  affiliate_levels         affiliate_levels?         @relation(fields: [level_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  affiliate_profiles       affiliate_profiles?       @relation("affiliate_profilesToaffiliate_profiles", fields: [parent_affiliate_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  other_affiliate_profiles affiliate_profiles[]      @relation("affiliate_profilesToaffiliate_profiles")
  users                    users                     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "affiliate_profiles_userid_fkey")
  commission_transactions  commission_transactions[]
}

model article_categories {
  id          String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name        String     @db.VarChar
  description String?
  createdAt   DateTime?  @default(now()) @db.Timestamptz(6)
  articles    articles[]
}

model article_service_prices {
  id              String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  article_id      String?        @db.Uuid
  service_type_id String?        @db.Uuid
  base_price      Decimal        @db.Decimal
  premium_price   Decimal?       @db.Decimal
  is_available    Boolean?       @default(true)
  price_per_kg    Decimal?       @db.Decimal
  created_at      DateTime?      @default(now()) @db.Timestamptz(6)
  updated_at      DateTime?      @default(now()) @db.Timestamptz(6)
  pricing_type    String?        @db.VarChar
  service_id      String?        @db.Uuid
  articles        articles?      @relation(fields: [article_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  services        services?      @relation(fields: [service_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  service_types   service_types? @relation(fields: [service_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([service_type_id, article_id, service_id], map: "article_service_prices_unique_couple")
  @@index([service_type_id, article_id], map: "idx_asp_service_type")
  @@index([service_id], map: "idx_asp_service_id")
}

model articles {
  id                     String                   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  categoryId             String?                  @db.Uuid
  name                   String                   @db.VarChar
  description            String?
  basePrice              Decimal                  @db.Decimal
  createdAt              DateTime?                @default(now()) @db.Timestamptz(6)
  updatedAt              DateTime?                @default(now()) @db.Timestamptz(6)
  premiumPrice           Decimal?                 @default(0) @db.Decimal
  isDeleted              Boolean?                 @default(false)
  deletedAt              DateTime?                @db.Timestamptz(6)
  article_archives       article_archives[]
  article_service_prices article_service_prices[]
  article_categories     article_categories?      @relation(fields: [categoryId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "articles_category_id_fkey")
  offer_articles         offer_articles[]
  order_items            order_items[]
}

model blog_categories {
  id          String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name        String    @unique @db.VarChar
  description String?
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  updated_at  DateTime? @default(now()) @db.Timestamptz(6)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model commissionTransactions {
  id           String            @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  affiliate_id String?           @db.Uuid
  order_id     String            @db.Uuid
  amount       Decimal           @db.Decimal
  created_at   DateTime?         @default(now()) @db.Timestamptz(6)
  status       commission_status @default(PENDING)

  @@ignore
}

model loyalty_points {
  id            String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId        String?   @unique(map: "loyalty_points_userid_key") @db.Uuid
  pointsBalance Int?      @default(0)
  totalEarned   Int?      @default(0)
  createdAt     DateTime? @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime? @default(now()) @db.Timestamptz(6)
  users         users?    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "loyalty_points_userid_fkey")
}

model notification_preferences {
  id            String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId        String    @db.Uuid
  email         Boolean?  @default(true)
  push          Boolean?  @default(true)
  sms           Boolean?  @default(false)
  order_updates Boolean?  @default(true)
  promotions    Boolean?  @default(true)
  payments      Boolean?  @default(true)
  loyalty       Boolean?  @default(true)
  created_at    DateTime? @default(now()) @db.Timestamptz(6)
  updated_at    DateTime? @default(now()) @db.Timestamptz(6)
  users         users     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "notification_preferences_userid_fkey")
}

model notification_rules {
  id         String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  event_type String    @db.VarChar
  user_role  String
  template   String?
  is_active  Boolean?  @default(true)
  created_at DateTime? @default(now()) @db.Timestamptz(6)
}

model notifications {
  id         String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId     String?   @db.Uuid
  type       String
  message    String
  read       Boolean?  @default(false)
  data       Json?
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @default(now()) @db.Timestamptz(6)
  users      users?    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "notifications_userid_fkey")
}

model offer_articles {
  id         String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  offer_id   String?   @db.Uuid
  article_id String?   @db.Uuid
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  articles   articles? @relation(fields: [article_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  offers     offers?   @relation(fields: [offer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model offer_subscriptions {
  id            String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId        String?            @db.Uuid
  offer_id      String?            @db.Uuid
  status        offer_status_enum? @default(ACTIVE)
  subscribed_at DateTime?          @default(now()) @db.Timestamptz(6)
  updated_at    DateTime?          @default(now()) @db.Timestamptz(6)
  offers        offers?            @relation(fields: [offer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users         users?             @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "offer_subscriptions_userid_fkey")
}

model offers {
  id                  String                @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name                String                @db.VarChar
  description         String?
  discountType        String                @db.VarChar
  discountValue       Decimal               @db.Decimal
  minPurchaseAmount   Decimal?              @db.Decimal
  maxDiscountAmount   Decimal?              @db.Decimal
  isCumulative        Boolean?              @default(false)
  startDate           DateTime?             @db.Timestamptz(6)
  endDate             DateTime?             @db.Timestamptz(6)
  is_active           Boolean?              @default(true)
  created_at          DateTime?             @default(now()) @db.Timestamptz(6)
  updated_at          DateTime?             @default(now()) @db.Timestamptz(6)
  pointsRequired      Decimal?              @db.Decimal
  offer_articles      offer_articles[]
  offer_subscriptions offer_subscriptions[]
  user_offers         user_offers[]
}

model order_items {
  id        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  orderId   String   @db.Uuid
  articleId String   @db.Uuid
  serviceId String   @db.Uuid
  quantity  Int
  unitPrice Decimal  @db.Decimal
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @db.Timestamptz(6)
  isPremium Boolean? @default(false)
  weight    Decimal? @db.Decimal
  article   articles @relation(fields: [articleId], references: [id])
  order     orders   @relation(fields: [orderId], references: [id])
}

model order_metadata {
  order_id       String    @id @db.Uuid
  is_flash_order Boolean?  @default(false)
  metadata       Json?     @default("{}")
  created_at     DateTime? @default(now()) @db.Timestamptz(6)
  updated_at     DateTime? @default(now()) @db.Timestamptz(6)
  orders         orders    @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model order_notes {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  order_id   String    @db.Uuid
  note       String?
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @default(now()) @db.Timestamptz(6)
  orders     orders    @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model orders {
  id                      String                    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  addressId               String?                   @db.Uuid
  affiliateCode           String?
  status                  order_status?             @default(PENDING)
  isRecurring             Boolean?                  @default(false)
  recurrenceType          recurrence_type?          @default(NONE)
  nextRecurrenceDate      DateTime?                 @db.Timestamptz(6)
  totalAmount             Decimal?                  @db.Decimal
  collectionDate          DateTime?                 @db.Timestamptz(6)
  deliveryDate            DateTime?                 @db.Timestamptz(6)
  createdAt               DateTime?                 @default(now()) @db.Timestamptz(6)
  updatedAt               DateTime?                 @default(now()) @db.Timestamptz(6)
  serviceId               String?                   @db.Uuid
  service_type_id         String                    @db.Uuid
  userId                  String                    @db.Uuid
  paymentMethod           payment_method_enum?      @default(CASH)
  commission_transactions commission_transactions[]
  order_items             order_items[]
  order_metadata          order_metadata?
  order_notes             order_notes[]
  address                 addresses?                @relation(fields: [addressId], references: [id])
  service_types           service_types             @relation(fields: [service_type_id], references: [id])
  user                    users                     @relation(fields: [userId], references: [id])
  orders_archive          orders_archive?
  user_offers             user_offers[]
}

model orders_archive {
  id                 String         @id @db.Uuid
  address_id         String?        @db.Uuid
  affiliatecode      String?        @db.VarChar
  status             String         @db.VarChar
  isrecurring        Boolean?
  recurrencetype     String?        @db.VarChar
  nextrecurrencedate DateTime?      @db.Timestamptz(6)
  totalAmount        Decimal        @db.Decimal
  collectiondate     DateTime?      @db.Timestamptz(6)
  deliverydate       DateTime?      @db.Timestamptz(6)
  createdAt          DateTime?      @db.Timestamptz(6)
  updatedat          DateTime?      @db.Timestamptz(6)
  service_id         String?        @db.Uuid
  service_type_id    String?        @db.Uuid
  userId             String?        @db.Uuid
  archived_at        DateTime?      @default(now()) @db.Timestamptz(6)
  addresses          addresses?     @relation(fields: [address_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  orders             orders         @relation(fields: [id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  services           services?      @relation(fields: [service_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  service_types      service_types? @relation(fields: [service_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model point_transactions {
  id                     String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId                 String?   @db.Uuid
  points                 Int?
  type                   String
  source                 String
  referenceId            String    @db.VarChar
  createdAt              DateTime? @default(now()) @db.Timestamptz(6)
  conversion_rate        Decimal?  @db.Decimal
  related_transaction_id String?   @db.Uuid
  users                  users?    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "point_transactions_userid_fkey")
}

model reset_codes {
  id         String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId     String    @db.Uuid
  email      String
  code       String    @db.VarChar
  expires_at DateTime  @db.Timestamptz(6)
  used       Boolean?  @default(false)
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @default(now()) @db.Timestamptz(6)
  users      users     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "reset_codes_userid_fkey")
}

model service_types {
  id                     String                   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name                   String                   @db.VarChar
  description            String?
  created_at             DateTime?                @default(now()) @db.Timestamptz(6)
  is_default             Boolean?                 @default(false)
  requires_weight        Boolean?                 @default(false)
  supports_premium       Boolean?                 @default(false)
  updated_at             DateTime?                @default(now()) @db.Timestamptz(6)
  is_active              Boolean?                 @default(true)
  pricing_type           String?                  @db.VarChar
  article_service_prices article_service_prices[]
  orders                 orders[]
  orders_archive         orders_archive[]
  services               services[]
}

model services {
  id                     String                   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name                   String                   @db.VarChar
  description            String?
  created_at             DateTime?                @default(now()) @db.Timestamptz(6)
  updated_at             DateTime?                @default(now()) @db.Timestamptz(6)
  price                  Int?
  is_partial             Boolean?                 @default(false)
  service_type_id        String?                  @db.Uuid
  article_service_prices article_service_prices[]
  orders_archive         orders_archive[]
  service_types          service_types?           @relation(fields: [service_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model temp_notifications {
  id         String?   @db.Uuid
  userId     String?   @db.Uuid
  message    String?
  read       Boolean?
  created_at DateTime? @db.Timestamptz(6)
  updated_at DateTime? @db.Timestamptz(6)
  data       Json?
  users      users?    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "temp_notifications_userid_fkey")

  @@ignore
}

model users {
  id                       String                     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email                    String                     @db.VarChar
  password                 String                     @db.VarChar
  first_name               String                     @db.VarChar
  last_name                String                     @db.VarChar
  phone                    String?                    @db.VarChar
  role                     user_role?                 @default(CLIENT)
  referral_code            String?                    @db.VarChar
  created_at               DateTime?                  @default(now()) @db.Timestamptz(6)
  updated_at               DateTime?                  @default(now()) @db.Timestamptz(6)
  addresses                addresses[]
  affiliate_profiles       affiliate_profiles?
  blog_articles            blog_articles[]
  loyalty_points           loyalty_points?
  notification_preferences notification_preferences[]
  notifications            notifications[]
  offer_subscriptions      offer_subscriptions[]
  orders                   orders[]
  point_transactions       point_transactions[]
  reset_codes              reset_codes[]
  temp_notifications       temp_notifications[]       @ignore
  user_activity_logs       user_activity_logs[]
  user_offers              user_offers[]
  user_subscriptions       user_subscriptions[]
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model v_error_count {
  count BigInt?

  @@ignore
}

model article_archives {
  id          String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  original_id String?   @db.Uuid
  articles    articles? @relation(fields: [original_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model blog_articles {
  id           String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  author_id    String?   @db.Uuid
  published_at DateTime? @db.Timestamptz(6)
  users        users?    @relation(fields: [author_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([author_id], map: "idx_blog_articles_author")
  @@index([published_at], map: "idx_blog_articles_published")
}

model commission_transactions {
  id                 String              @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  created_at         DateTime?           @default(now()) @db.Timestamptz(6)
  updated_at         DateTime?           @default(now()) @db.Timestamptz(6)
  order_id           String?             @db.Uuid
  affiliate_id       String?             @db.Uuid
  amount             Decimal             @db.Decimal
  status             commission_status   @default(PENDING)
  affiliate_profiles affiliate_profiles? @relation(fields: [affiliate_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  orders             orders?             @relation(fields: [order_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model order_weights {
  id String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
}

model price_configurations {
  id String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model price_history {
  id         String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  valid_from DateTime  @default(now()) @db.Timestamptz(6)
  valid_to   DateTime? @db.Timestamptz(6)
}

model reward_claims {
  id String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
}

model rewards {
  id String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
}

model subscription_plans {
  id                   String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                 String               @db.VarChar
  description          String?
  price                Decimal              @db.Decimal
  duration_days        Int                  @default(30)
  max_orders_per_month Int                  @default(10)
  max_weight_per_order Decimal?             @db.Decimal
  is_premium           Boolean              @default(false)
  created_at           DateTime             @default(now()) @db.Timestamptz(6)
  updated_at           DateTime             @default(now()) @db.Timestamptz(6)
  user_subscriptions   user_subscriptions[]
}

model user_offers {
  id       String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId   String? @db.Uuid
  offer_id String? @db.Uuid
  order_id String? @db.Uuid
  offers   offers? @relation(fields: [offer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  orders   orders? @relation(fields: [order_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users    users?  @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_offers_userid_fkey")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model weight_based_pricing {
  id           String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  min_weight   Decimal  @default(0) @db.Decimal
  max_weight   Decimal  @default(999999) @db.Decimal
  created_at   DateTime @default(now()) @db.Timestamptz(6)
  price_per_kg Decimal  @db.Decimal
  updated_at   DateTime @default(now()) @db.Timestamptz(6)
}

model user_activity_logs {
  id         String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId     String   @db.Uuid
  action     String
  details    Json?
  ip_address String?
  user_agent String?
  created_at DateTime @default(now()) @db.Timestamptz(6)
  users      users    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_activity_logs_userid_fkey")

  @@index([userId], map: "user_activity_logs_user_id_idx")
}

model user_subscriptions {
  id                 String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId             String             @db.Uuid
  plan_id            String             @db.Uuid
  start_date         DateTime           @default(now()) @db.Timestamptz(6)
  end_date           DateTime           @db.Timestamptz(6)
  status             String             @default("ACTIVE") @db.VarChar(32)
  remaining_orders   Int?               @default(0)
  expired            Boolean            @default(false)
  created_at         DateTime           @default(now()) @db.Timestamptz(6)
  updated_at         DateTime           @default(now()) @db.Timestamptz(6)
  subscription_plans subscription_plans @relation(fields: [plan_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_plan")
  users              users              @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user_subscription_user")

  @@index([plan_id], map: "idx_user_subscriptions_plan_id")
  @@index([userId], map: "idx_user_subscriptions_user_id")
}

enum commission_status {
  PENDING
  APPROVED
  REJECTED
  PAID
}

enum discount_type_enum {
  PERCENTAGE
  FIXED_AMOUNT
}

enum notification_type {
  ORDER_STATUS
  ORDER_CREATED
  ORDER_STATUS_UPDATED
  POINTS_EARNED
  REFERRAL_BONUS
  SERVICE_CREATED
  SERVICE_UPDATED
  SERVICE_TYPE_CREATED
  SERVICE_TYPE_UPDATED
  SUBSCRIPTION_CREATED
  SUBSCRIPTION_CANCELLED
  PROMOTIONS
  AFFILIATE_STATUS_UPDATED
  WEIGHT_RECORDED
  PRICE_UPDATED
}

enum offer_status_enum {
  ACTIVE
  INACTIVE
}

enum order_status {
  DRAFT
  PENDING
  COLLECTING
  COLLECTED
  PROCESSING
  READY
  DELIVERING
  DELIVERED
  CANCELLED
}

enum payment_method_enum {
  CASH
  ORANGE_MONEY
}

enum point_source {
  ORDER
  REFERRAL
  REWARD
}

enum point_transaction_type {
  EARNED
  SPENT
}

enum recurrence_type {
  NONE
  WEEKLY
  BIWEEKLY
  MONTHLY
}

enum status {
  PENDING
  ACTIVE
  SUSPENDED
}

enum user_role {
  SUPER_ADMIN
  ADMIN
  CLIENT
  AFFILIATE
  DELIVERY
}

enum OrderStatus {
  PENDING
  COLLECTING
  COLLECTED
  PROCESSING
  READY
  DELIVERING
  DELIVERED
  CANCELLED
}
