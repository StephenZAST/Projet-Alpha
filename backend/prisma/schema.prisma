// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum PaymentMethod {
  CASH
  ORANGE_MONEY
}

enum OrderStatus {
  PENDING
  COLLECTING
  COLLECTED
  PROCESSING
  READY
  DELIVERING
  DELIVERED
  CANCELLED
}

enum RecurrenceType {
  NONE
  WEEKLY
  BIWEEKLY
  MONTHLY
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
  POINTS_EXCHANGE
}

enum NotificationType {
  ORDER_CREATED
  ORDER_STATUS_UPDATED
  ORDER_COLLECTED
  ORDER_READY
  ORDER_DELIVERED
  PAYMENT_RECEIVED
  POINTS_EARNED
  SPECIAL_OFFER
  WITHDRAWAL_REQUESTED
  WITHDRAWAL_APPROVED
  WITHDRAWAL_REJECTED
  AFFILIATE_STATUS_UPDATED
  COMMISSION_EARNED
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  CLIENT
  AFFILIATE
  DELIVERY
}

enum CommissionStatus {
  PENDING
  APPROVED
  PAID
  REJECTED
}

enum AffiliateStatus {
  PENDING
  ACTIVE
  SUSPENDED
  INACTIVE
}

enum PointTransactionType {
  EARNED
  SPENT
}

enum PointSource {
  ORDER
  REFERRAL
  REWARD
}

// Models
model User {
  id                        String    @id @default(uuid()) @db.Uuid
  email                     String    @unique @db.VarChar(255)
  password                  String    @db.VarChar(255)
  first_name                String    @db.VarChar(100)
  last_name                 String    @db.VarChar(100)
  phone                     String?   @unique @db.VarChar(20)
  role                      UserRole  @default(CLIENT)
  referral_code            String?   @db.VarChar(20)
  created_at               DateTime  @default(now()) @db.Timestamptz
  updated_at               DateTime  @default(now()) @db.Timestamptz
  instance_id              String?   @db.Uuid
  aud                      String?   @db.VarChar(255)
  encrypted_password       String?   @db.VarChar(255)
  email_confirmed_at       DateTime? @db.Timestamptz
  invited_at               DateTime? @db.Timestamptz
  confirmation_token       String?   @db.VarChar(255)
  confirmation_sent_at     DateTime? @db.Timestamptz
  recovery_token          String?   @db.VarChar(255)
  recovery_sent_at        DateTime? @db.Timestamptz
  email_change_token_new  String?   @db.VarChar(255)
  email_change            String?   @db.VarChar(255)
  email_change_sent_at    DateTime? @db.Timestamptz
  last_sign_in_at         DateTime? @db.Timestamptz
  raw_app_meta_data       Json?     @db.JsonB
  raw_user_meta_data      Json?     @db.JsonB
  is_super_admin          Boolean?
  phone_confirmed_at      DateTime? @db.Timestamptz
  phone_change            String?   @default("") @db.Text
  phone_change_token      String?   @default("") @db.VarChar(255)
  phone_change_sent_at    DateTime? @db.Timestamptz
  confirmed_at            DateTime? @db.Timestamptz
  email_change_token_current String? @default("") @db.VarChar(255)
  email_change_confirm_status Int?    @default(0) @db.SmallInt
  banned_until            DateTime? @db.Timestamptz
  reauthentication_token  String?   @default("") @db.VarChar(255)
  reauthentication_sent_at DateTime? @db.Timestamptz
  is_sso_user            Boolean   @default(false)
  deleted_at             DateTime? @db.Timestamptz
  is_anonymous           Boolean   @default(false)

  // Relations
  orders                  Order[]
  notifications          Notification[]
  notificationPreferences NotificationPreferences?
  loyaltyPoints          LoyaltyPoints?
  addresses              Address[]
  archivedOrders         OrderArchive[]
  pointTransactions      PointTransaction[]
  resetCodes             ResetCode[]
  rewardClaims           RewardClaim[]
  userOffers             UserOffer[]
  affiliateProfile       AffiliateProfile?
  blogArticles          BlogArticle[]

  // Indexes
  @@index([email])
  @@index([referral_code])
  @@index([instance_id])
  @@index([is_anonymous])
  @@index([instance_id, email])
  @@unique([email_change_token_current])
  @@unique([email_change_token_new])
  @@unique([reauthentication_token])
  @@unique([recovery_token])
  @@unique([confirmation_token])
  @@unique([email])
}

model Address {
  id            String    @id @default(uuid()) @db.Uuid
  user_id       String?   @db.Uuid
  name          String?   @db.VarChar(255)
  street        String    @db.VarChar(255)
  city          String    @db.VarChar(100)
  postal_code   String?   @db.VarChar(20)
  gps_latitude  Decimal?  @db.Decimal
  gps_longitude Decimal?  @db.Decimal
  is_default    Boolean?  @default(false)
  created_at    DateTime? @default(now()) @db.Timestamptz
  updated_at    DateTime? @default(now()) @db.Timestamptz

  // Relations
  user          User?     @relation(fields: [user_id], references: [id])
  orders        Order[]
  archivedOrders OrderArchive[]
}

model Order {
  id                 String         @id @default(uuid()) @db.Uuid
  paymentMethod      PaymentMethod? @default(CASH)
  status            OrderStatus?   @default(PENDING)
  isRecurring       Boolean?       @default(false)
  recurrenceType    RecurrenceType? @default(NONE)
  nextRecurrenceDate DateTime?      @db.Timestamptz
  totalAmount       Decimal?       @db.Decimal
  collectionDate    DateTime?      @db.Timestamptz
  deliveryDate      DateTime?      @db.Timestamptz
  createdAt         DateTime?      @default(now()) @db.Timestamptz
  updatedAt         DateTime?      @default(now()) @db.Timestamptz
  affiliateCode     String?

  // Foreign keys and relations
  addressId        String?        @db.Uuid
  address          Address?       @relation(fields: [addressId], references: [id])
  
  serviceId        String?        @db.Uuid
  service          Service?       @relation(fields: [serviceId], references: [id])
  
  service_type_id  String?        @db.Uuid
  serviceType      ServiceType?   @relation(fields: [service_type_id], references: [id])
  
  userId           String         @db.Uuid
  user            User           @relation(fields: [userId], references: [id])

  orderItems       OrderItem[]
  commissionTransaction CommissionTransaction[]
  archive          OrderArchive?
  userOffers       UserOffer[]

  // Indexes
  @@index([service_type_id])
  @@index([serviceId])
  @@index([addressId])
  @@index([userId])
  @@index([status])
  @@index([paymentMethod])
}

model OrderArchive {
  id                String    @id @db.Uuid
  address_id        String?   @db.Uuid
  affiliatecode     String?   @db.VarChar(255)
  status            String    @db.VarChar(50)
  isrecurring      Boolean?
  recurrencetype   String?   @db.VarChar(50)
  nextrecurrencedate DateTime? @db.Timestamptz
  totalAmount      Decimal    @db.Decimal
  collectiondate   DateTime?  @db.Timestamptz
  deliverydate     DateTime?  @db.Timestamptz
  createdAt        DateTime?  @db.Timestamptz
  updatedat        DateTime?  @db.Timestamptz
  service_id       String?    @db.Uuid
  service_type_id  String?    @db.Uuid
  userId           String?    @db.Uuid
  archived_at      DateTime?  @default(now()) @db.Timestamptz

  // Relations
  order            Order     @relation(fields: [id], references: [id])
  address          Address?  @relation(fields: [address_id], references: [id])
  service          Service?  @relation(fields: [service_id], references: [id])
  serviceType      ServiceType? @relation(fields: [service_type_id], references: [id])
  user             User?     @relation(fields: [userId], references: [id])

  // Indexes
  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@index([archived_at])
}

model Service {
  id              String           @id @default(uuid()) @db.Uuid
  name            String          @db.VarChar
  description     String?
  price           Int
  created_at      DateTime        @default(now()) @db.Timestamptz
  updated_at      DateTime        @default(now()) @db.Timestamptz

  // Relations
  orders          Order[]
  orderItems      OrderItem[]
  articleServices ArticleService[]
  archivedOrders  OrderArchive[]
}

model ServiceType {
  id          String    @id @default(uuid()) @db.Uuid
  name        String    @db.VarChar
  description String?
  created_at  DateTime  @default(now()) @db.Timestamptz

  // Relations
  orders      Order[]
  archivedOrders OrderArchive[]
}

model OrderItem {
  id         String   @id @default(uuid()) @db.Uuid
  orderId    String   @db.Uuid
  articleId  String   @db.Uuid
  serviceId  String   @db.Uuid
  quantity   Int
  unitPrice  Decimal  @db.Decimal
  createdAt  DateTime @default(now()) @db.Timestamptz
  updatedAt  DateTime @default(now()) @db.Timestamptz

  // Relations
  order      Order    @relation(fields: [orderId], references: [id])
  article    Article  @relation(fields: [articleId], references: [id])
  service    Service  @relation(fields: [serviceId], references: [id])

  // Indexes and constraints
  @@unique([orderId, articleId])
  @@index([orderId])
  @@index([articleId])
}

model Article {
  id            String           @id @default(uuid()) @db.Uuid
  categoryId    String?         @db.Uuid
  name          String          @db.VarChar
  description   String?
  basePrice     Decimal?        @db.Decimal
  premiumPrice  Decimal         @default(0) @db.Decimal
  createdAt     DateTime        @default(now()) @db.Timestamptz
  updatedAt     DateTime        @default(now()) @db.Timestamptz

  // Relations
  category      ArticleCategory? @relation(fields: [categoryId], references: [id])
  orderItems    OrderItem[]
  articleServices ArticleService[]
  offerArticles OfferArticle[]

  // Indexes
  @@index([categoryId])
}

model ArticleCategory {
  id          String    @id @default(uuid()) @db.Uuid
  name        String    @db.VarChar
  description String?
  createdAt   DateTime  @default(now()) @db.Timestamptz
  articles    Article[]
}

model AffiliateProfile {
  id               String    @id @default(uuid()) @db.Uuid
  userId           String    @unique @db.Uuid
  affiliateCode    String    @unique @db.VarChar(50)
  parentAffiliateId String?  @db.Uuid
  commissionBalance Decimal  @default(0) @db.Decimal
  totalEarned      Decimal  @default(0) @db.Decimal
  monthlyEarnings  Decimal  @default(0) @db.Decimal
  totalReferrals   Int      @default(0)
  status           AffiliateStatus @default(PENDING)
  isActive         Boolean  @default(false)
  createdAt        DateTime @default(now()) @db.Timestamptz
  updatedAt        DateTime @default(now()) @db.Timestamptz
  levelId          String?  @db.Uuid

  // Relations
  user             User     @relation(fields: [userId], references: [id])
  parentAffiliate  AffiliateProfile? @relation("AffiliateHierarchy", fields: [parentAffiliateId], references: [id])
  childAffiliates  AffiliateProfile[] @relation("AffiliateHierarchy")
  level            AffiliateLevel? @relation(fields: [levelId], references: [id])
  commissionTransactions CommissionTransaction[]

  @@index([affiliateCode])
  @@index([parentAffiliateId])
  @@index([levelId])
}

model AffiliateLevel {
  id            String    @id @default(uuid()) @db.Uuid
  name          String    @db.VarChar(50)
  minEarnings   Decimal  @db.Decimal
  commissionRate Decimal  @db.Decimal
  createdAt     DateTime @default(now()) @db.Timestamptz
  updatedAt     DateTime @default(now()) @db.Timestamptz

  // Relations
  affiliates    AffiliateProfile[]

  @@index([minEarnings])
}

model CommissionTransaction {
  id           String    @id @default(uuid()) @db.Uuid
  affiliateId  String    @db.Uuid
  orderId      String?   @db.Uuid
  amount       Decimal   @db.Decimal
  type         String    @db.VarChar(50) // 'COMMISSION', 'WITHDRAWAL', 'INDIRECT_COMMISSION'
  status       CommissionStatus @default(PENDING)
  createdAt    DateTime @default(now()) @db.Timestamptz
  updatedAt    DateTime @default(now()) @db.Timestamptz

  // Relations
  affiliate    AffiliateProfile @relation(fields: [affiliateId], references: [id])
  order        Order?    @relation(fields: [orderId], references: [id])

  @@index([affiliateId])
  @@index([orderId])
  @@index([type])
  @@index([status])
  @@index([createdAt])
}

model BlogCategory {
  id          String       @id @default(uuid()) @db.Uuid
  name        String       @unique @db.VarChar(255)
  description String?
  createdAt   DateTime     @default(now()) @db.Timestamptz
  updatedAt   DateTime     @default(now()) @db.Timestamptz
  articles    BlogArticle[]

  @@map("blog_categories")
}

model BlogArticle {
  id          String       @id @default(uuid()) @db.Uuid
  title       String       @db.VarChar(255)
  content     String       @db.Text
  categoryId  String?      @db.Uuid
  authorId    String       @db.Uuid
  createdAt   DateTime     @default(now()) @db.Timestamptz
  updatedAt   DateTime     @default(now()) @db.Timestamptz
  publishedAt DateTime?    @db.Timestamptz
  isPublished Boolean      @default(false)

  // Relations
  category    BlogCategory? @relation(fields: [categoryId], references: [id])
  author      User         @relation(fields: [authorId], references: [id])

  @@index([categoryId])
  @@index([authorId])
  @@index([publishedAt])
  @@map("blog_articles")
}

model ArticleService {
  id              String    @id @default(uuid()) @db.Uuid
  articleId       String    @db.Uuid
  serviceId       String    @db.Uuid
  priceMultiplier Decimal   @default(1.0) @db.Decimal
  createdAt       DateTime  @default(now()) @db.Timestamptz

  // Relations
  article         Article   @relation(fields: [articleId], references: [id])
  service         Service   @relation(fields: [serviceId], references: [id])

  // Indexes
  @@index([articleId])
  @@index([serviceId])
}
