// Main Prisma schema file
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

// Import all modular schemas
import * from "./schemas/core"
import * from "./schemas/auth_user"
import * from "./schemas/order_product"
import * from "./schemas/business"

/*
DOCUMENTATION DE LA BASE DE DONNÉES

Pour obtenir une liste à jour des fonctions et procédures, utilisez db_functions.sql
Les index sont définis directement dans les modèles Prisma avec @@index
*/

// ======= FONCTIONS ET PROCÉDURES MÉTIER ESSENTIELLES =======

/* 1. Gestion des Commandes */
// create_order_with_items (Function)
// Description: Crée une commande et ses items de manière atomique
// Paramètres: p_userId, p_serviceId, p_addressId, p_isRecurring, p_items[]
// Retourne: Détails de la commande créée

// cleanup_old_orders (Function)
// Description: Archive les commandes terminées > 30 jours
// Paramètre: days_threshold (défaut: 30)
// Retourne: Nombre d'archives créées

/* 2. Système d'Affiliation */
// process_affiliate_commission (Procedure)
// Description: Traite les commissions directes et indirectes
// Paramètres: p_order_id, p_order_amount, p_affiliate_code
// Règles métier:
// - Commission directe = 40% du montant * taux selon parrainage:
//   * 20% si ≥ 20 parrainages
//   * 15% si ≥ 10 parrainages
//   * 10% par défaut
// - Commission indirecte = 10% de la commission directe (pour le parent)

// update_affiliate_level (Procedure)
// Description: Met à jour le niveau d'un affilié selon ses gains totaux
// Paramètre: p_affiliate_id
// Action: Ajuste le niveau selon les seuils de gains définis

/* 3. Gestion des Retraits */
// process_withdrawal_request (Procedure)
// Description: Traite une demande de retrait
// Paramètres: p_affiliate_id, p_amount
// Règles métier:
// - Montant minimum: 25000 FCFA
// - Compte affilié doit être ACTIF
// - Solde suffisant requis

// approve_withdrawal (Procedure) & reject_withdrawal (Procedure)
// Description: Gère l'approbation/rejet des retraits
// Actions respectives:
// - Approuve: Change statut vers APPROVED
// - Rejette: Change statut vers REJECTED et rembourse

// ======= TRIGGERS MÉTIER IMPORTANTS =======

/* 1. Triggers de Commande */
// archive_completed_orders_trigger (AFTER UPDATE ON orders)
// Déclenché: Quand une commande passe à DELIVERED
// Action: Archive automatiquement la commande
// Fonction: archive_completed_orders()

/* 2. Triggers d'Affiliation */
// after_affiliate_earnings_update (AFTER UPDATE ON affiliate_profiles)
// Déclenché: Modification des gains d'un affilié
// Action: Met à jour automatiquement le niveau
// Fonction: trigger_update_affiliate_level()

/* 3. Triggers d'Initialisation */
// create_user_loyalty_points (AFTER INSERT ON users)
// Déclenché: Création d'un nouvel utilisateur
// Action: Initialise les points de fidélité
// Fonction: initialize_user_loyalty_points()

/* 4. Triggers de Maintenance (updated_at) */
// Ces triggers mettent à jour automatiquement le champ updated_at
// Tables concernées:
// - users, orders, order_items
// - articles, services
// - addresses, notifications
// - loyalty_points
// - blog_articles, blog_categories
// Fonctions utilisées:
// - update_updated_at_column()
// - update_orders_timestamp()
// - update_order_items_updated_at()
// - update_loyalty_points_updated_at()

Note: Les triggers système de Supabase (pgsodium, realtime, storage, vault)
ne sont pas documentés ici car ils sont gérés automatiquement par la plateforme.
