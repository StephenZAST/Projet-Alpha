// This schema uses several stored procedures for order and affiliate management:

// 1. create_order_with_items - Order Creation Procedure
// Handles:
// - Order creation with all items
// - Price calculations including premium prices
// - Atomic transaction handling
// Call signature:
// create_order_with_items(
//   p_userId UUID,            -- User creating the order
//   p_serviceId UUID,        -- Selected service
//   p_addressId UUID,        -- Delivery address
//   p_isRecurring BOOLEAN,   -- Recurring order flag
//   p_recurrenceType recurrence_type,  -- Type of recurrence
//   p_collectionDate TIMESTAMPTZ,      -- Collection date
//   p_deliveryDate TIMESTAMPTZ,        -- Delivery date
//   p_affiliateCode TEXT,              -- Optional affiliate code
//   p_service_type_id UUID,           -- Service type
//   p_paymentMethod payment_method_enum, -- Payment method
//   p_items order_item_input[]         -- Array of order items
// )

// 2. process_affiliate_commission - Commission Processing Procedure
// Handles:
// - Commission calculation for direct and indirect affiliates
// - Multi-level commission distribution
// - Transaction records creation
// Call signature:
// process_affiliate_commission(
//   p_order_id UUID,          -- Order ID for commission
//   p_order_amount DECIMAL,   -- Order amount for calculation
//   p_affiliate_code TEXT     -- Affiliate code used
// )

// 3. update_affiliate_level - Level Management Procedure
// Handles:
// - Affiliate level updates based on earnings
// - Commission rate adjustments
// Call signature:
// update_affiliate_level(
//   p_affiliate_id UUID      -- Affiliate ID to update
// )

// 4. reset_monthly_earnings - Monthly Reset Procedure
// Handles:
// - Monthly earnings reset for all active affiliates
// Call signature:
// reset_monthly_earnings()     -- No parameters needed

// For implementation details see:
// - Orders: backend/prisma/migrations/[timestamp]_stored_procedures.sql
// - Affiliates: backend/prisma/migrations/20250129_affiliate_procedures.sql

// Notification Models
model Notification {
  id         String           @id @default(uuid()) @db.Uuid
  user_id    String?         @db.Uuid
  type       NotificationType
  message    String
  read       Boolean?        @default(false)
  created_at DateTime?       @default(now()) @db.Timestamptz
  updated_at DateTime?       @default(now()) @db.Timestamptz

  // Relations
  user       User?           @relation(fields: [user_id], references: [id])

  // Indexes
  @@index([user_id])
}

model NotificationRule {
  id         String    @id @default(uuid()) @db.Uuid
  event_type String
  user_role  UserRole
  template   String?
  is_active  Boolean?  @default(true)
  created_at DateTime? @default(now()) @db.Timestamptz
}

model NotificationPreferences {
  id            String    @id @default(uuid()) @db.Uuid
  user_id       String    @unique @db.Uuid
  email         Boolean   @default(true)
  push          Boolean   @default(true)
  sms           Boolean   @default(false)
  order_updates Boolean   @default(true)
  promotions    Boolean   @default(true)
  payments      Boolean   @default(true)
  loyalty       Boolean   @default(true)
  created_at    DateTime  @default(now()) @db.Timestamptz
  updated_at    DateTime  @default(now()) @db.Timestamptz

  // Relations
  user          User      @relation(fields: [user_id], references: [id])
}

// Offer Models
model Offer {
  id                String         @id @default(uuid()) @db.Uuid
  name              String         @db.VarChar(255)
  description       String?
  discountType      DiscountType
  discountValue     Decimal        @db.Decimal
  minPurchaseAmount Decimal?       @db.Decimal
  maxDiscountAmount Decimal?       @db.Decimal
  points_required   Int?
  pointsRequired    Decimal?       @db.Decimal
  isCumulative      Boolean?       @default(false)
  startDate         DateTime?      @db.Timestamptz
  endDate           DateTime?      @db.Timestamptz
  is_active         Boolean?       @default(true)
  created_at        DateTime?      @default(now()) @db.Timestamptz
  updated_at        DateTime?      @default(now()) @db.Timestamptz
  offerArticles     OfferArticle[]
  discountRules     DiscountRule[]
  userOffers        UserOffer[]
}

model OfferArticle {
  id          String    @id @default(uuid()) @db.Uuid
  offer_id    String?   @db.Uuid
  article_id  String?   @db.Uuid
  created_at  DateTime? @default(now()) @db.Timestamptz

  // Relations
  offer       Offer?    @relation(fields: [offer_id], references: [id])
  article     Article?  @relation(fields: [article_id], references: [id])
}

model UserOffer {
  id           String    @id @default(uuid()) @db.Uuid
  user_id      String?   @db.Uuid
  offer_id     String?   @db.Uuid
  order_id     String?   @db.Uuid
  used_at      DateTime? @db.Timestamptz
  points_spent Int?
  created_at   DateTime? @default(now()) @db.Timestamptz

  // Relations
  user         User?     @relation(fields: [user_id], references: [id])
  offer        Offer?    @relation(fields: [offer_id], references: [id])
  order        Order?    @relation(fields: [order_id], references: [id])
}

// Loyalty Models
model LoyaltyPoints {
  id            String    @id @default(uuid()) @db.Uuid
  user_id       String    @unique @db.Uuid
  pointsBalance Int?      @default(0)
  totalEarned   Int?      @default(0)
  createdAt     DateTime? @default(now()) @db.Timestamptz
  updatedAt     DateTime? @default(now()) @db.Timestamptz

  // Relations
  user          User      @relation(fields: [user_id], references: [id])
}

model PointTransaction {
  id                    String              @id @default(uuid()) @db.Uuid
  userId                String              @db.Uuid
  points                Int
  type                  PointTransactionType
  source                PointSource
  referenceId           String?             @db.VarChar
  createdAt             DateTime            @default(now()) @db.Timestamptz
  conversion_rate       Decimal?            @db.Decimal
  related_transaction_id String?            @db.Uuid

  // Relations
  user                  User                @relation(fields: [userId], references: [id])

  // Indexes
  @@index([userId])
}

model Reward {
  id          String        @id @default(uuid()) @db.Uuid
  name        String        @db.VarChar
  description String?
  points_cost Int
  available   Boolean       @default(true)
  created_at  DateTime      @default(now()) @db.Timestamptz
  updated_at  DateTime      @default(now()) @db.Timestamptz

  // Relations
  claims      RewardClaim[]
}

model RewardClaim {
  id           String    @id @default(uuid()) @db.Uuid
  user_id      String    @db.Uuid
  reward_id    String    @db.Uuid
  points_spent Int
  created_at   DateTime  @default(now()) @db.Timestamptz

  // Relations
  user         User      @relation(fields: [user_id], references: [id])
  reward       Reward    @relation(fields: [reward_id], references: [id])

  // Indexes
  @@index([user_id])
  @@index([reward_id])
}

// Affiliate Models
model AffiliateProfile {
  id                    String           @id @default(uuid()) @db.Uuid
  user_id              String           @unique @db.Uuid
  affiliate_code        String           @unique @db.VarChar(255)
  parent_affiliate_id   String?         @db.Uuid
  commission_balance    Decimal?        @default(0) @db.Decimal
  total_earned         Decimal?        @default(0) @db.Decimal
  commission_rate      Decimal?        @default(10.00) @db.Decimal
  is_active           Boolean?        @default(true)
  total_referrals     Int?           @default(0)
  monthly_earnings     Decimal?        @default(0.00) @db.Decimal
  level_id            String?         @db.Uuid
  status              AffiliateStatus? @default(PENDING)
  created_at          DateTime?       @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz
  updated_at          DateTime?       @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz

  // Relations
  user                User            @relation(fields: [user_id], references: [id])
  parentAffiliate     AffiliateProfile?  @relation("AffiliateHierarchy", fields: [parent_affiliate_id], references: [id])
  childAffiliates     AffiliateProfile[] @relation("AffiliateHierarchy")
  affiliateLevel      AffiliateLevel?    @relation(fields: [level_id], references: [id])
  commissionTransactions CommissionTransaction[]

  // Indexes
  @@index([affiliate_code])
}

model AffiliateLevel {
  id                String             @id @default(uuid()) @db.Uuid
  name              String            @db.VarChar
  min_earnings      Decimal?          @db.Decimal
  commission_rate   Decimal?          @db.Decimal
  created_at        DateTime          @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz
  updated_at        DateTime          @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz
  
  // Relations
  affiliateProfiles AffiliateProfile[]
}

model CommissionTransaction {
  id           String           @id @default(uuid()) @db.Uuid
  affiliate_id String           @db.Uuid
  order_id     String?         @db.Uuid
  amount       Decimal?        @db.Decimal
  created_at   DateTime        @default(now()) @db.Timestamptz
  status       CommissionStatus @default(PENDING)

  // Relations
  affiliate    AffiliateProfile @relation(fields: [affiliate_id], references: [id])
  order        Order?           @relation(fields: [order_id], references: [id])

  // Indexes
  @@index([affiliate_id])
  @@index([order_id])
}

// Price Models
model PriceConfiguration {
  id                String    @id @default(uuid()) @db.Uuid
  name              String    @db.VarChar
  description       String?
  markup_percentage Decimal   @default(0) @db.Decimal
  is_active        Boolean   @default(true)
  created_at       DateTime  @default(now()) @db.Timestamptz
}

model PriceHistory {
  id            String    @id @default(uuid()) @db.Uuid
  article_id    String    @db.Uuid
  base_price    Decimal   @db.Decimal
  premium_price Decimal   @db.Decimal
  valid_from    DateTime  @default(now()) @db.Timestamptz
  valid_to      DateTime? @db.Timestamptz
  created_at    DateTime  @default(now()) @db.Timestamptz

  // Relations
  article       Article   @relation(fields: [article_id], references: [id])

  // Indexes
  @@index([article_id])
}

model DiscountRule {
  id                 String    @id @default(uuid()) @db.Uuid
  offer_id          String    @db.Uuid
  priority          Int?
  min_purchase_amount Decimal?  @db.Decimal
  max_discount_amount Decimal?  @db.Decimal
  is_combinable     Boolean   @default(false)
  created_at        DateTime  @default(now()) @db.Timestamptz

  // Relations
  offer             Offer     @relation(fields: [offer_id], references: [id])

  // Indexes
  @@index([offer_id])
}

// Authentication Models
model ResetCode {
  id         String    @id @default(uuid()) @db.Uuid
  user_id    String    @db.Uuid
  email      String
  code       String    @db.VarChar
  expires_at DateTime? @db.Timestamptz
  used       Boolean   @default(false)
  created_at DateTime  @default(now()) @db.Timestamptz
  updated_at DateTime  @default(now()) @db.Timestamptz

  // Relations
  user       User      @relation(fields: [user_id], references: [id])
}