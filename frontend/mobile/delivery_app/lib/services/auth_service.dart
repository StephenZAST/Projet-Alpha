import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:get_storage/get_storage.dart';
import 'package:dio/dio.dart';

import '../constants.dart';
import '../models/user.dart';
import 'api_service.dart';

/// üîê Service d'Authentification - Alpha Delivery App
///
/// G√®re l'authentification des livreurs avec JWT,
/// la persistance de session et la synchronisation avec le backend.
class AuthService extends GetxService {
  // ==========================================================================
  // üì¶ PROPRI√âT√âS
  // ==========================================================================

  final GetStorage _storage = GetStorage();
  ApiService get _apiService => Get.find<ApiService>();

  // √âtats observables
  final _isAuthenticated = false.obs;
  final _currentUser = Rxn<DeliveryUser>();
  final _isLoading = false.obs;
  final _token = RxnString();

  // ==========================================================================
  // üéØ GETTERS
  // ==========================================================================

  bool get isAuthenticated => _isAuthenticated.value;
  DeliveryUser? get currentUser => _currentUser.value;
  bool get isLoading => _isLoading.value;
  String? get token => _token.value;

  // Getters observables pour les widgets
  RxBool get isAuthenticatedRx => _isAuthenticated;
  Rxn<DeliveryUser> get currentUserRx => _currentUser;
  RxBool get isLoadingRx => _isLoading;

  // ==========================================================================
  // üë§ GESTION UTILISATEUR
  // ==========================================================================

  /// Met √† jour l'utilisateur actuel
  void setCurrentUser(DeliveryUser? user) {
    _currentUser.value = user;
    debugPrint('üë§ Utilisateur mis √† jour: ${user?.email}');
  }

  // ==========================================================================
  // üöÄ INITIALISATION
  // ==========================================================================

  @override
  Future<void> onInit() async {
    super.onInit();
    debugPrint('üîê Initialisation AuthService...');

    // Charge la session sauvegard√©e
    await _loadSavedSession();

    debugPrint('‚úÖ AuthService initialis√©');
  }

  /// Charge la session sauvegard√©e depuis le stockage local
  Future<void> _loadSavedSession() async {
    try {
      final savedToken = _storage.read<String>(StorageKeys.authToken);
      final savedUserData =
          _storage.read<Map<String, dynamic>>(StorageKeys.userProfile);

      if (savedToken != null && savedUserData != null) {
        _token.value = savedToken;
        _currentUser.value = DeliveryUser.fromJson(savedUserData);
        _isAuthenticated.value = true;

        // Configure le token dans ApiService
        _apiService.setAuthToken(savedToken);

        debugPrint('‚úÖ Session restaur√©e pour: ${_currentUser.value?.email}');

        // V√©rifie la validit√© du token
        await _validateToken();
      }
    } catch (e) {
      debugPrint('‚ùå Erreur lors du chargement de la session: $e');
      await logout();
    }
  }

  /// V√©rifie la validit√© du token aupr√®s du serveur
  Future<void> _validateToken() async {
    try {
      final response = await _apiService.get('/auth/validate');

      if (response.statusCode != 200) {
        debugPrint('‚ö†Ô∏è Token invalide, d√©connexion...');
        await logout();
      }
    } catch (e) {
      debugPrint('‚ö†Ô∏è Impossible de valider le token: $e');
      // On garde la session locale mais on marque comme non valid√©e
    }
  }

  // ==========================================================================
  // üîë M√âTHODES D'AUTHENTIFICATION
  // ==========================================================================

  /// Connexion avec email et mot de passe
  Future<AuthResult> login(String email, String password) async {
    try {
      _isLoading.value = true;

      debugPrint('üîê Tentative de connexion pour: $email');

      final response = await _apiService.post(
        '/auth/admin/login', // Utilise le m√™me endpoint que l'admin
        data: {
          'email': email,
          'password': password,
        },
      );

      if (response.statusCode == 200) {
        final responseData = response.data;
        
        // V√©rifie la structure de la r√©ponse
        if (responseData['success'] != true || responseData['data'] == null) {
          return AuthResult.error('R√©ponse invalide du serveur');
        }
        
        final data = responseData['data'] as Map<String, dynamic>;

        // V√©rifie que l'utilisateur a un r√¥le autoris√© (DELIVERY, ADMIN, SUPER_ADMIN)
        final userRole = data['user']['role'] as String;
        final allowedRoles = ['DELIVERY', 'ADMIN', 'SUPER_ADMIN'];

        if (!allowedRoles.contains(userRole)) {
          return AuthResult.error('Acc√®s non autoris√© pour ce r√¥le');
        }

        debugPrint('‚úÖ Connexion autoris√©e pour le r√¥le: $userRole');

        // Sauvegarde les donn√©es d'authentification
        final token = data['token'] as String;
        final userData = data['user'] as Map<String, dynamic>;

        await _saveSession(token, userData);

        debugPrint('‚úÖ Connexion r√©ussie');
        return AuthResult.success();
      } else {
        final message = response.data['message'] ?? 'Erreur de connexion';
        return AuthResult.error(message);
      }
    } on DioException catch (e) {
      debugPrint('‚ùå Erreur Dio lors de la connexion: ${e.message}');

      if (e.response?.statusCode == 401) {
        return AuthResult.error('Email ou mot de passe incorrect');
      } else if (e.response?.statusCode == 403) {
        return AuthResult.error('Acc√®s non autoris√©');
      } else {
        return AuthResult.error('Erreur de connexion au serveur');
      }
    } catch (e) {
      debugPrint('‚ùå Erreur lors de la connexion: $e');
      return AuthResult.error('Une erreur inattendue s\'est produite');
    } finally {
      _isLoading.value = false;
    }
  }

  /// D√©connexion
  Future<void> logout() async {
    try {
      debugPrint('üö™ D√©connexion en cours...');

      // V√©rifier si on est d√©j√† en cours de d√©connexion pour √©viter les boucles
      if (!_isAuthenticated.value) {
        debugPrint('‚ö†Ô∏è D√©j√† d√©connect√©, arr√™t du processus');
        return;
      }

      // Marquer comme d√©connect√© imm√©diatement pour √©viter les boucles
      _isAuthenticated.value = false;

      // Appel au serveur pour invalider le token (optionnel)
      try {
        // Seulement si on a un token valide
        if (_token.value != null && _token.value!.isNotEmpty) {
          await _apiService.post('/auth/logout');
        }
      } catch (e) {
        debugPrint('‚ö†Ô∏è Erreur lors de la d√©connexion serveur: $e');
        // Ne pas relancer d'erreur, continuer le nettoyage local
      }

      // Nettoyage local
      await _clearSession();

      debugPrint('‚úÖ D√©connexion termin√©e');
    } catch (e) {
      debugPrint('‚ùå Erreur lors de la d√©connexion: $e');
      // Force le nettoyage m√™me en cas d'erreur
      await _clearSession();
    }
  }

  /// Actualise le token d'authentification
  Future<bool> refreshToken() async {
    try {
      debugPrint('üîÑ Actualisation du token...');

      final response = await _apiService.post('/auth/refresh');

      if (response.statusCode == 200) {
        final newToken = response.data['token'] as String;

        _token.value = newToken;
        await _storage.write(StorageKeys.authToken, newToken);
        _apiService.setAuthToken(newToken);

        debugPrint('‚úÖ Token actualis√©');
        return true;
      }

      return false;
    } catch (e) {
      debugPrint('‚ùå Erreur lors de l\'actualisation du token: $e');
      return false;
    }
  }

  // ==========================================================================
  // üíæ GESTION DE SESSION
  // ==========================================================================

  /// Sauvegarde la session d'authentification
  Future<void> _saveSession(String token, Map<String, dynamic> userData) async {
    try {
      // Sauvegarde en local
      await _storage.write(StorageKeys.authToken, token);
      await _storage.write(StorageKeys.userProfile, userData);

      // Met √† jour l'√©tat
      _token.value = token;
      _currentUser.value = DeliveryUser.fromJson(userData);
      _isAuthenticated.value = true;

      // Configure ApiService
      _apiService.setAuthToken(token);
    } catch (e) {
      debugPrint('‚ùå Erreur lors de la sauvegarde de session: $e');
      rethrow;
    }
  }

  /// Efface la session d'authentification
  Future<void> _clearSession() async {
    try {
      // Nettoyage du stockage local
      await _storage.remove(StorageKeys.authToken);
      await _storage.remove(StorageKeys.userProfile);

      // Reset de l'√©tat
      _token.value = null;
      _currentUser.value = null;
      _isAuthenticated.value = false;

      // Nettoyage ApiService
      _apiService.clearAuthToken();
    } catch (e) {
      debugPrint('‚ùå Erreur lors du nettoyage de session: $e');
    }
  }

  // ==========================================================================
  // üë§ GESTION DU PROFIL
  // ==========================================================================

  /// Met √† jour le profil utilisateur
  Future<bool> updateProfile(Map<String, dynamic> profileData) async {
    try {
      debugPrint('üë§ Mise √† jour du profil...');

      final response = await _apiService.put(
        '/users/profile',
        data: profileData,
      );

      if (response.statusCode == 200) {
        final updatedUserData = response.data['user'] as Map<String, dynamic>;

        // Met √† jour localement
        _currentUser.value = DeliveryUser.fromJson(updatedUserData);
        await _storage.write(StorageKeys.userProfile, updatedUserData);

        debugPrint('‚úÖ Profil mis √† jour');
        return true;
      }

      return false;
    } catch (e) {
      debugPrint('‚ùå Erreur lors de la mise √† jour du profil: $e');
      return false;
    }
  }

  /// Change le mot de passe
  Future<AuthResult> changePassword(
      String currentPassword, String newPassword) async {
    try {
      debugPrint('üîí Changement de mot de passe...');

      final response = await _apiService.put(
        '/auth/change-password',
        data: {
          'currentPassword': currentPassword,
          'newPassword': newPassword,
        },
      );

      if (response.statusCode == 200) {
        debugPrint('‚úÖ Mot de passe chang√©');
        return AuthResult.success();
      } else {
        final message = response.data['message'] ?? 'Erreur lors du changement';
        return AuthResult.error(message);
      }
    } on DioException catch (e) {
      if (e.response?.statusCode == 400) {
        return AuthResult.error('Mot de passe actuel incorrect');
      } else {
        return AuthResult.error('Erreur lors du changement de mot de passe');
      }
    } catch (e) {
      debugPrint('‚ùå Erreur lors du changement de mot de passe: $e');
      return AuthResult.error('Une erreur inattendue s\'est produite');
    }
  }

  // ==========================================================================
  // üîß M√âTHODES UTILITAIRES
  // ==========================================================================

  /// V√©rifie si l'utilisateur a un r√¥le sp√©cifique
  bool hasRole(String role) {
    return _currentUser.value?.role == role;
  }

  /// V√©rifie si l'utilisateur est un livreur
  bool get isDeliveryUser => hasRole('DELIVERY');

  /// V√©rifie si l'utilisateur est un admin
  bool get isAdmin => hasRole('ADMIN');

  /// V√©rifie si l'utilisateur est un super admin
  bool get isSuperAdmin => hasRole('SUPER_ADMIN');

  /// V√©rifie si l'utilisateur a des privil√®ges admin (ADMIN ou SUPER_ADMIN)
  bool get hasAdminPrivileges => isAdmin || isSuperAdmin;

  /// V√©rifie si l'utilisateur peut acc√©der aux fonctionnalit√©s de livraison
  bool get canAccessDeliveryFeatures => isDeliveryUser || hasAdminPrivileges;

  /// Obtient le niveau de privil√®ge de l'utilisateur
  int get privilegeLevel {
    if (isSuperAdmin) return 3;
    if (isAdmin) return 2;
    if (isDeliveryUser) return 1;
    return 0;
  }

  /// Obtient le nom d'affichage du r√¥le
  String get roleDisplayName {
    switch (_currentUser.value?.role) {
      case 'SUPER_ADMIN':
        return 'Super Administrateur';
      case 'ADMIN':
        return 'Administrateur';
      case 'DELIVERY':
        return 'Livreur';
      default:
        return 'Utilisateur';
    }
  }

  /// Obtient la couleur associ√©e au r√¥le
  Color get roleColor {
    switch (_currentUser.value?.role) {
      case 'SUPER_ADMIN':
        return const Color(0xFF9C27B0); // Purple
      case 'ADMIN':
        return const Color(0xFF2196F3); // Blue
      case 'DELIVERY':
        return const Color(0xFF4CAF50); // Green
      default:
        return const Color(0xFF757575); // Grey
    }
  }

  /// Obtient l'ic√¥ne associ√©e au r√¥le
  IconData get roleIcon {
    switch (_currentUser.value?.role) {
      case 'SUPER_ADMIN':
        return Icons.admin_panel_settings;
      case 'ADMIN':
        return Icons.manage_accounts;
      case 'DELIVERY':
        return Icons.delivery_dining;
      default:
        return Icons.person;
    }
  }

  /// Obtient les headers d'authentification
  Map<String, String> get authHeaders {
    if (_token.value != null) {
      return {'Authorization': 'Bearer ${_token.value}'};
    }
    return {};
  }
}

/// üìä R√©sultat d'une op√©ration d'authentification
class AuthResult {
  final bool success;
  final String? message;
  final Map<String, dynamic>? data;

  AuthResult._({
    required this.success,
    this.message,
    this.data,
  });

  factory AuthResult.success({String? message, Map<String, dynamic>? data}) {
    return AuthResult._(
      success: true,
      message: message,
      data: data,
    );
  }

  factory AuthResult.error(String message) {
    return AuthResult._(
      success: false,
      message: message,
    );
  }
}
